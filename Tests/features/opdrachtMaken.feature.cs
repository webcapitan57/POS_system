// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OpdrachtenMakenFeature : object, Xunit.IClassFixture<OpdrachtenMakenFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "opdrachtMaken.feature"
#line hidden
        
        public OpdrachtenMakenFeature(OpdrachtenMakenFeature.FixtureData fixtureData, Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "features", "opdrachten maken", "  Als leerling wil ik opdrachten maken zodat ik mee kan doen aan de groepsopdrach" +
                    "t.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
  #line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Question",
                        "Options"});
            table19.AddRow(new string[] {
                        "1",
                        "waarom nam je deze foto",
                        ""});
            table19.AddRow(new string[] {
                        "2",
                        "waarom vind je deze mooi",
                        ""});
            table19.AddRow(new string[] {
                        "3",
                        "waarom vind je deze lelijk",
                        ""});
            table19.AddRow(new string[] {
                        "4",
                        "is dit subjectief of objectief",
                        "objectief,subjectief"});
#line 7
testRunner.Given("sideQuestions:", ((string)(null)), table19, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Question",
                        "SideQuestions"});
            table20.AddRow(new string[] {
                        "1",
                        "neem een foto uit je buurt",
                        "1"});
            table20.AddRow(new string[] {
                        "2",
                        "wat vind je mooi",
                        "2"});
            table20.AddRow(new string[] {
                        "3",
                        "wat vind je lelijk",
                        "3,4"});
#line 14
    testRunner.Given("photoQuestions:", ((string)(null)), table20, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Title",
                        "Questions"});
            table21.AddRow(new string[] {
                        "1",
                        "mijn buurt",
                        "1"});
            table21.AddRow(new string[] {
                        "2",
                        "wat is kunst",
                        "2,3"});
#line 20
    testRunner.Given("setTasks:", ((string)(null)), table21, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Tasks"});
            table22.AddRow(new string[] {
                        "1",
                        "1,2"});
#line 25
    testRunner.Given("Setup:", ((string)(null)), table22, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "UserId",
                        "Name",
                        "SetUp"});
            table23.AddRow(new string[] {
                        "1",
                        "karel de grote",
                        "1"});
#line 29
    testRunner.Given("teachers:", ((string)(null)), table23, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Teacher",
                        "Tasks"});
            table24.AddRow(new string[] {
                        "1A1B1C",
                        "1",
                        "1"});
            table24.AddRow(new string[] {
                        "2D2E2F",
                        "1",
                        "1"});
            table24.AddRow(new string[] {
                        "3G3H3I",
                        "1",
                        "1,2"});
#line 33
    testRunner.Given("groups:", ((string)(null)), table24, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Group"});
            table25.AddRow(new string[] {
                        "1",
                        "2D2E2F"});
            table25.AddRow(new string[] {
                        "2",
                        "2D2E2F"});
            table25.AddRow(new string[] {
                        "3",
                        "2D2E2F"});
#line 39
    testRunner.Given("students:", ((string)(null)), table25, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Image"});
            table26.AddRow(new string[] {
                        "1",
                        "mijnbuurt.jpg"});
            table26.AddRow(new string[] {
                        "2",
                        "ookmijnbuurt.jpg"});
            table26.AddRow(new string[] {
                        "3",
                        "kappa.jpg"});
            table26.AddRow(new string[] {
                        "4",
                        "pogchamp.jpg"});
            table26.AddRow(new string[] {
                        "5",
                        "antwerpen.jpg"});
            table26.AddRow(new string[] {
                        "6",
                        "halle.jpg"});
            table26.AddRow(new string[] {
                        "7",
                        "kingkong.jpg"});
            table26.AddRow(new string[] {
                        "8",
                        "morgana.jpg"});
#line 45
    testRunner.Given("photos:", ((string)(null)), table26, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "GivenAnswer",
                        "SideQuestion"});
            table27.AddRow(new string[] {
                        "1",
                        "",
                        "1"});
            table27.AddRow(new string[] {
                        "2",
                        "omdat dit het eerste is dat ik tegen kwam en te lui ben om verder te zoeken",
                        "2"});
            table27.AddRow(new string[] {
                        "3",
                        "omdat ik het zeg",
                        "3"});
            table27.AddRow(new string[] {
                        "4",
                        "2",
                        "4"});
#line 56
    testRunner.Given("sideAnswers:", ((string)(null)), table27, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "PhotoQuestion",
                        "SideAnswers",
                        "AssignedPhoto"});
            table28.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "1"});
            table28.AddRow(new string[] {
                        "2",
                        "2",
                        "",
                        "1"});
            table28.AddRow(new string[] {
                        "3",
                        "3",
                        "2",
                        "2"});
            table28.AddRow(new string[] {
                        "4",
                        "4",
                        "3,4",
                        "3"});
#line 63
    testRunner.Given("answers:", ((string)(null)), table28, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "SentPhotos",
                        "Answers",
                        "SetTask",
                        "Group"});
            table29.AddRow(new string[] {
                        "1",
                        "",
                        "",
                        "1",
                        "2D2E2F"});
            table29.AddRow(new string[] {
                        "2",
                        "",
                        "",
                        "2",
                        "2D2E2F"});
            table29.AddRow(new string[] {
                        "3",
                        "1,5",
                        "1",
                        "1",
                        "2D2E2F"});
            table29.AddRow(new string[] {
                        "4",
                        "3,4,7,8",
                        "3,4",
                        "2",
                        "2D2E2F"});
            table29.AddRow(new string[] {
                        "5",
                        "2,6",
                        "2",
                        "1",
                        "2D2E2F"});
            table29.AddRow(new string[] {
                        "6",
                        "",
                        "",
                        "2",
                        "2D2E2F"});
#line 70
    testRunner.Given("taskDeliveries:", ((string)(null)), table29, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A student sends in a picture for a task with a single question")]
        [Xunit.TraitAttribute("FeatureTitle", "opdrachten maken")]
        [Xunit.TraitAttribute("Description", "A student sends in a picture for a task with a single question")]
        public virtual void AStudentSendsInAPictureForATaskWithASingleQuestion()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A student sends in a picture for a task with a single question", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 80
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 81
    testRunner.When("Student adds the picture \"antwerpen.jpg\" as an answer to the task \"mijn buurt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
    testRunner.Then("Answer \"5\" is initiated and linked to taskDelivery \"1\" and question \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And("Answer \"5\" is linked to question \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And("Photo \"9\" is initiated and linked to taskDelivery \"1\" and answer \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("Photo \"9\" is given the value \"antwerpen.jpg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.And("sideAnswer \"5\" is created and linked to sideQuestion \"1\" and answer \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A student sends in a picture for a task with multiple questions from the task scr" +
            "een")]
        [Xunit.TraitAttribute("FeatureTitle", "opdrachten maken")]
        [Xunit.TraitAttribute("Description", "A student sends in a picture for a task with multiple questions from the task scr" +
            "een")]
        public virtual void AStudentSendsInAPictureForATaskWithMultipleQuestionsFromTheTaskScreen()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A student sends in a picture for a task with multiple questions from the task scr" +
                    "een", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 89
    testRunner.When("Student adds the picture \"monalisa.jpg\" as a picture related to the task \"wat is " +
                        "kunst\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
    testRunner.Then("photo \"9\", is created and is linked to taskDelivery \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
    testRunner.And("Photo \"9\" is given the value \"monalisa.jpg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A student assigns a picture to a specific question")]
        [Xunit.TraitAttribute("FeatureTitle", "opdrachten maken")]
        [Xunit.TraitAttribute("Description", "A student assigns a picture to a specific question")]
        public virtual void AStudentAssignsAPictureToASpecificQuestion()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A student assigns a picture to a specific question", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 93
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 94
    testRunner.When("Student selects \"kingkong.jpg\" from the uploaded list of photos as an answer to t" +
                        "he question \"wat vind je mooi\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
    testRunner.Then("Answer \"5\" is initiated and linked to taskDelivery \"4\" and question \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
    testRunner.And("Photo \"7\" is linked to answer \"6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
    testRunner.And("SideAnswer \"5\" is initiated and linked to answer \"5\" and sideQuestion \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A student sends in a picture for a task with multiple questions from the question" +
            " screen")]
        [Xunit.TraitAttribute("FeatureTitle", "opdrachten maken")]
        [Xunit.TraitAttribute("Description", "A student sends in a picture for a task with multiple questions from the question" +
            " screen")]
        public virtual void AStudentSendsInAPictureForATaskWithMultipleQuestionsFromTheQuestionScreen()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A student sends in a picture for a task with multiple questions from the question" +
                    " screen", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 99
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 100
    testRunner.When("Student adds the picture \"jhoncena.jpg\" answering the question \"wat vind je lelij" +
                        "k\" in the \"wat is kunst\" task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
    testRunner.Then("Answer \"5\" is initiated and linked to taskDelivery \"2\" and question \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.And("Photo \"9\" is initiated and linked to answer \"7\" and taskDelivery \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
    testRunner.And("Photo \"9\" is given the value \"jhoncena.jpg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
    testRunner.And("SideAnswer \"5\" is initiated and linked to answer \"5\" and sideQuestion \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
    testRunner.And("SideAnswer \"5\" is initiated and linked to answer \"5\" and sideQuestion \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A student answers a side question")]
        [Xunit.TraitAttribute("FeatureTitle", "opdrachten maken")]
        [Xunit.TraitAttribute("Description", "A student answers a side question")]
        public virtual void AStudentAnswersASideQuestion()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A student answers a side question", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 107
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 108
    testRunner.When("Student answers sideQuestion \"waarom nam je deze foto\" with \"waarom niet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
    testRunner.Then("SideAnswer is given the value \"waarom niet\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A student tries to send in a completed task")]
        [Xunit.TraitAttribute("FeatureTitle", "opdrachten maken")]
        [Xunit.TraitAttribute("Description", "A student tries to send in a completed task")]
        public virtual void AStudentTriesToSendInACompletedTask()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A student tries to send in a completed task", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 111
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 112
    testRunner.When("Student presses the complete button for task \"wat is kunst\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
    testRunner.Then("taskDelivery \"3\" is send to the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A student tries to send in a task with uncompleted photoQuestions")]
        [Xunit.TraitAttribute("FeatureTitle", "opdrachten maken")]
        [Xunit.TraitAttribute("Description", "A student tries to send in a task with uncompleted photoQuestions")]
        public virtual void AStudentTriesToSendInATaskWithUncompletedPhotoQuestions()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A student tries to send in a task with uncompleted photoQuestions", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 115
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 116
    testRunner.When("Student presses the complete button for task \"wat is kunst\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
    testRunner.Then("An exception is shown \"de volgende fotovragen zijn niet beantwoord: wat vind je m" +
                        "ooi, wat vind je lelijk\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A student tries to send in a task with uncompleted photoQuestions2")]
        [Xunit.TraitAttribute("FeatureTitle", "opdrachten maken")]
        [Xunit.TraitAttribute("Description", "A student tries to send in a task with uncompleted photoQuestions2")]
        public virtual void AStudentTriesToSendInATaskWithUncompletedPhotoQuestions2()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A student tries to send in a task with uncompleted photoQuestions2", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
  this.FeatureBackground();
#line hidden
#line 120
    testRunner.When("Student presses the complete button for task \"mijn buurt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
    testRunner.Then("An exception is shown \"je hebt 1 of meerdere side answers niet beantwoord in: nee" +
                        "m een foto uit je buurt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OpdrachtenMakenFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OpdrachtenMakenFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
